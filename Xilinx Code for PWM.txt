Testbench

module Main_led_brightness_control_PWM(main_PWM, main_btn_in, main_Clk50Mhz, main_rst);

input main_btn_in, main_Clk50Mhz, main_rst;
output main_PWM;

wire w_clr_push_btn;//It connects "top_button" with "top_pwm_ScRomPc".

top_button md_TB(.btn_in(main_btn_in), .clk(main_Clk50Mhz), .rst_n(main_rst), .p_out(w_clr_push_btn));

top_pwm_ScRomPc md_PGen(.pwm_gen(main_PWM), .push_btn(w_clr_push_btn), .tp_clk(main_Clk50Mhz), .tp_rst(main_rst));

endmodule

module top_button(btn_in, clk, rst_n, p_out);
//This is the wrapper or top module for push button it includes synchronizer debouncer and level 2 pulse convertor

input btn_in, clk, rst_n;
output p_out;

wire b_w, db_w;
 
synchronizer Sync1(.async_in(btn_in), .clk(clk), .rst_n(rst_n), .sync_out(b_w));

top_debounce Debounce1(.bounce_in(b_w), .clk(clk), .rst_n(rst_n), .debounce_out(db_w));

lev_puls_conv L2P_1(.clk(clk), .rst_n(rst_n), .level_in(db_w), .pulse_out(p_out));
endmodule

module synchronizer(async_in, clk, rst_n, sync_out);

//This circuit performs the synchronization of async input with clock

input async_in, clk, rst_n;
output sync_out;

reg sync1, sync2;

always@(posedge clk or negedge rst_n)
begin
if(~rst_n)
begin
sync1<=1'b0;
sync2<=1'b0;
end
else
begin
sync1<=async_in;
sync2<=sync1;
end
end

assign sync_out=sync2;
endmodule

module top_debounce(bounce_in, clk, rst_n, debounce_out);
// This is wrapper for switch debouncing it includes counter for 20ms and FSM for debouncing 

input bounce_in, clk, rst_n;
output debounce_out;

wire cnt_w, strt_w;

sm_debounce SM_de_1(.clk(clk), .rst_n(rst_n), .b_in(bounce_in), .cnt(cnt_w), .strt(strt_w), .db_out(debounce_out));
counter_20ms C20_1(.strt(strt_w), .clk(clk), .rst_n(rst_n), .cnt_p(cnt_w));

endmodule

module lev_puls_conv(clk, rst_n, level_in, pulse_out);
// This module performs level to pulse convertor
input clk, rst_n, level_in;
output pulse_out;

reg [1:0] c_state, n_state;

localparam high =2'b00;
localparam pulse=2'b01;
localparam low  =2'b10;

always@(posedge clk or negedge rst_n)
begin
if(~rst_n)
c_state <= 2'd0;
else
c_state <= n_state;
end

always@(*)
begin
n_state= c_state;
case(c_state)
high:
begin
if(~level_in)
n_state=pulse;
else
n_state= c_state;
end
pulse:
begin
if(level_in)
n_state=high;
else
n_state=low;
end
low:
begin
if(level_in)
n_state=high;
else
n_state=c_state;
end
default: n_state=high;
endcase
end

assign pulse_out= (c_state==pulse)? 1'd0:1'd1;
endmodule

module top_pwm_ScRomPc(pwm_gen, push_btn, tp_clk, tp_rst);

input push_btn, tp_clk, tp_rst;
output pwm_gen;

wire [2:0]w_sel_dec; //Connects "sel" & "sel_dec".
selection_counter m_sc1(.sel(w_sel_dec), .clk(tp_clk), .rst_n(tp_rst), .pb_in(push_btn));
wire [15:0]w_nOut; //Connects "n_out" & "n_rom".
rom_n m_rom2(.n_out(w_nOut), .sel_dec(w_sel_dec));

pwm_counter m_pc3(.pwm(pwm_gen), .strt(push_btn), .clk(tp_clk), .rst_n(tp_rst), .n_rom(w_nOut));

endmodule

module selection_counter(sel, clk, rst_n, pb_in);


output [2:0]sel;
input clk, rst_n, pb_in;
//pb_in is input which is pure input from button.
//pb_in will connect with "p_out" of Top_button module.
reg [2:0] sel;

always@(posedge clk or negedge rst_n)
begin
if (~rst_n)
sel <= 3'b000;
else if(~pb_in)//Tilta removed.
begin
if(sel <3'b100)
sel <= sel+1'b1;
else if(sel == 3'b100)
sel <= 3'b000;
end
else
sel <= sel;
end
endmodule

module pwm_counter(pwm, strt, clk, rst_n, n_rom);

input strt;//Button input.
input clk, rst_n;
input [15:0]n_rom;//16 bit input from ROM which sets the time of counter

output pwm;
reg pwm;//PWM Output.

reg [15:0] count_out;

localparam total=16'd50000;

reg en;
wire din;

assign din=(~strt)? 1'b1 : en;

always@(posedge clk, negedge rst_n)
begin
if(~rst_n)
en <= 1'd0;
else
en <= din;
end


//First Counter.
always@(posedge clk, negedge rst_n)
begin

if(~rst_n ) //1st IF.
begin
	count_out<=16'd0;
	pwm<=1'b0;
end

else
begin
	if(en)//2nd IF
	begin
		count_out<=count_out+1'd1;
		if(count_out<=total)//3rd IF
		begin
			if(count_out<n_rom)
			begin
				pwm<=1'b1;
			end
	
			else if(count_out>n_rom)
			begin
				pwm<=1'b0;
			end
	
			else
			begin
				pwm<=pwm;
			end
		end //End of 3rd IF.
		
		else	
		begin
			count_out<=16'd0;
		end
	
	end//end of if(en)

	else
	begin
		count_out<=16'd0;
	end
end//End of outer else
end//End of Always Block.

endmodule

module rom_n(n_out, sel_dec);

input [2:0]sel_dec;
output [15:0]n_out;
reg [15:0]n_out;
always@(sel_dec)
begin
	case(sel_dec)
	3'b000 : n_out=16'd0;
	3'b001 : n_out=16'd12500;
	3'b010 : n_out=16'd25000;
	3'b011 : n_out=16'd37500;
	3'b100 : n_out=16'd50000;
	default : n_out=16'd0;
	endcase
end

endmodule

module counter_20ms (strt, clk, rst_n, cnt_p);
//This module performs 20ms delay counter for switch debouncing state machine
input strt, clk, rst_n;
output cnt_p;

localparam N=19;
reg [N:0] count;
reg en;
wire din;

assign din=(strt)? 1'b1 : en;
assign cnt_p=(&count)? 1'b1:1'b0;

always@(posedge clk, negedge rst_n)
begin
if(~rst_n || cnt_p)
en <= 1'd0;
else
en <= din;
end

always@(posedge clk, negedge rst_n)
begin
if(~rst_n)
count=20'd0;
else
begin
if(en)
count=count+1'd1;
else
count=20'd0;
end
end

endmodule

LED and PWM Duty Cycle

module PWM_Generator_Verilog
 (
 clk, // 100MHz clock input 
 increase_duty, // input to increase 10% duty cycle 
 decrease_duty, // input to decrease 10% duty cycle 
 PWM_OUT // 10MHz PWM output signal 
    );
 input clk;
 input increase_duty;
 input decrease_duty;
 output PWM_OUT;
 wire slow_clk_enable; // slow clock enable signal for debouncing FFs
 reg[27:0] counter_debounce=0;// counter for creating slow clock enable signals 
 wire tmp1,tmp2,duty_inc;// temporary flip-flop signals for debouncing the increasing button
 wire tmp3,tmp4,duty_dec;// temporary flip-flop signals for debouncing the decreasing button
 reg[3:0] counter_PWM=0;// counter for creating 10Mhz PWM signal
 reg[3:0] DUTY_CYCLE=5; // initial duty cycle is 50%
  // Debouncing 2 buttons for inc/dec duty cycle 
  // Firstly generate slow clock enable for debouncing flip-flop (4Hz)
 always @(posedge clk)
 begin
   counter_debounce <= counter_debounce + 1;
   //if(counter_debounce>=25000000) then  
   // for running on FPGA -- comment when running simulation
   if(counter_debounce>=1) 
   // for running simulation -- comment when running on FPGA
    counter_debounce <= 0;
 end
 // assign slow_clk_enable = counter_debounce == 25000000 ?1:0;
 // for running on FPGA -- comment when running simulation 
 assign slow_clk_enable = counter_debounce == 1 ?1:0;
 // for running simulation -- comment when running on FPGA
 // debouncing FFs for increasing button
 DFF_PWM PWM_DFF1(clk,slow_clk_enable,increase_duty,tmp1);
 DFF_PWM PWM_DFF2(clk,slow_clk_enable,tmp1, tmp2); 
 assign duty_inc =  tmp1 & (~ tmp2) & slow_clk_enable;
 // debouncing FFs for decreasing button
 DFF_PWM PWM_DFF3(clk,slow_clk_enable,decrease_duty, tmp3);
 DFF_PWM PWM_DFF4(clk,slow_clk_enable,tmp3, tmp4); 
 assign duty_dec =  tmp3 & (~ tmp4) & slow_clk_enable;
 // vary the duty cycle using the debounced buttons above
 always @(posedge clk)
 begin
   if(duty_inc==1 && DUTY_CYCLE <= 9) 
    DUTY_CYCLE <= DUTY_CYCLE + 1;// increase duty cycle by 10%
   else if(duty_dec==1 && DUTY_CYCLE>=1) 
    DUTY_CYCLE <= DUTY_CYCLE - 1;//decrease duty cycle by 10%
 end 
// Create 10MHz PWM signal with variable duty cycle controlled by 2 buttons 
 always @(posedge clk)
 begin
   counter_PWM <= counter_PWM + 1;
   if(counter_PWM>=9) 
    counter_PWM <= 0;
 end
 assign PWM_OUT = counter_PWM < DUTY_CYCLE ? 1:0;
endmodule
// Debouncing DFFs for push buttons on FPGA
module DFF_PWM(clk,en,D,Q);
input clk,en,D;
output reg Q;
always @(posedge clk)
begin 
 if(en==1) // slow clock enable signal 
  Q <= D;
end 
endmodule 
Verilog Testbench code for PWM generator:
`timescale 1ns / 1ps
// fpga4student.com: FPGA Projects, Verilog projects, VHDL projects 
// Verilog project: Verilog testbench code for PWM Generator with variable duty cycle 
module tb_PWM_Generator_Verilog;
 // Inputs
 reg clk;
 reg increase_duty;
 reg decrease_duty;
 // Outputs
 wire PWM_OUT;
 // Instantiate the PWM Generator with variable duty cycle in Verilog
 PWM_Generator_Verilog PWM_Generator_Unit(
  .clk(clk), 
  .increase_duty(increase_duty), 
  .decrease_duty(decrease_duty), 
  .PWM_OUT(PWM_OUT)
 );
 // Create 100Mhz clock
 initial begin
 clk = 0;
 forever #5 clk = ~clk;
 end 
 initial begin
  increase_duty = 0;
  decrease_duty = 0;
  #100; 
    increase_duty = 1; 
  #100;// increase duty cycle by 10%
    increase_duty = 0;
  #100; 
    increase_duty = 1;
  #100;// increase duty cycle by 10%
    increase_duty = 0;
  #100; 
    increase_duty = 1;
  #100;// increase duty cycle by 10%
    increase_duty = 0;
  #100;
    decrease_duty = 1; 
  #100;//decrease duty cycle by 10%
    decrease_duty = 0;
  #100; 
    decrease_duty = 1;
  #100;//decrease duty cycle by 10%
    decrease_duty = 0;
  #100;
    decrease_duty = 1;
  #100;//decrease duty cycle by 10%
    decrease_duty = 0;
 end
endmodule
